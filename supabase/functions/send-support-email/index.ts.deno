// @ts-nocheck
/// <reference types="https://esm.sh/@supabase/functions-js/src/edge-runtime.d.ts" />
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2';

// CORS headers - Allow requests from all origins during development
const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
  'Access-Control-Allow-Methods': 'POST, OPTIONS',
};

// Create Supabase client
const supabaseUrl = Deno.env.get('SUPABASE_URL') || '';
const supabaseKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') || '';
const supabase = createClient(supabaseUrl, supabaseKey);

Deno.serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, {
      status: 204,
      headers: corsHeaders
    });
  }

  try {
    // Verify authentication
    const authHeader = req.headers.get('Authorization');
    if (!authHeader) {
      return new Response(
        JSON.stringify({ error: 'Authorization header is required' }),
        {
          status: 401,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        }
      );
    }

    // Extract and verify the JWT token
    const token = authHeader.replace('Bearer ', '');
    const { data: { user }, error: authError } = await supabase.auth.getUser(token);

    if (authError || !user) {
      return new Response(
        JSON.stringify({ error: 'Invalid or expired token' }),
        {
          status: 401,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        }
      );
    }

    // Parse request body
    const { email, name, subject, message } = await req.json();

    // Validate required fields
    if (!email || !subject || !message) {
      return new Response(
        JSON.stringify({ error: 'Email, subject and message are required' }),
        {
          status: 400,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        }
      );
    }

    // Verify email matches authenticated user
    if (email !== user.email) {
      return new Response(
        JSON.stringify({ error: 'Email does not match authenticated user' }),
        {
          status: 403,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        }
      );
    }

    try {
      const mailtrapToken = Deno.env.get('MAILTRAP_TOKEN');
      if (!mailtrapToken) {
        return new Response(
          JSON.stringify({ error: 'MAILTRAP_TOKEN is not set' }),
          {
            status: 500,
            headers: { ...corsHeaders, 'Content-Type': 'application/json' }
          }
        );
      }

      const from = Deno.env.get('MAIL_FROM') || 'ConnectList <noreply@connectlist.me>';
      // Parse from to name/email
      let fromName = 'ConnectList';
      let fromEmail = from;
      const match = /^(.*)<([^>]+)>$/.exec(from);
      if (match) {
        fromName = match[1].trim().replace(/['"]/g, '') || 'ConnectList';
        fromEmail = match[2].trim();
      }

      const payload = {
        from: { email: fromEmail, name: fromName },
        to: [{ email: 'support@connectlist.me' }],
        subject: `[Destek Talebi] ${subject}`,
        html: `
          <h2 style="margin:0 0 12px;">Yeni Destek Talebi</h2>
          <p><strong>Gönderen:</strong> ${name} (${email})</p>
          <p><strong>Konu:</strong> ${subject}</p>
          <p><strong>Mesaj:</strong></p>
          <div style="background:#f5f5f5;padding:12px;border-radius:4px;margin:8px 0;">
            ${message.replace(/\n/g, '<br>')}
          </div>
        `,
        text: `Yeni Destek Talebi\nGönderen: ${name} (${email})\nKonu: ${subject}\n\nMesaj:\n${message}`,
        category: 'Support Request'
      };

      const response = await fetch('https://send.api.mailtrap.io/api/send', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${mailtrapToken}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(payload),
      });

      if (!response.ok) {
        const errorData = await response.json();
        console.error('Mailtrap API error:', errorData);
        return new Response(
          JSON.stringify({ error: 'Failed to send email', details: errorData }),
          {
            status: 500,
            headers: { ...corsHeaders, 'Content-Type': 'application/json' }
          }
        );
      }

      return new Response(
        JSON.stringify({ success: true }),
        {
          status: 200,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        }
      );
    } catch (emailError) {
      console.error('Email sending error:', emailError);
      return new Response(
        JSON.stringify({ error: 'Failed to send email', details: emailError.message }),
        {
          status: 500,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        }
      );
    }
  } catch (error) {
    console.error('Error:', error);
    return new Response(
      JSON.stringify({ error: 'Internal server error', details: error.message }),
      {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      }
    );
  }
});